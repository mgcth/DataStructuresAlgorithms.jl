var documenterSearchIndex = {"docs":
[{"location":"#DAT038.jl-Documentation","page":"DAT038.jl Documentation","title":"DAT038.jl Documentation","text":"","category":"section"},{"location":"","page":"DAT038.jl Documentation","title":"DAT038.jl Documentation","text":"Modules = [DAT038]\nOrder   = [:function, :type]","category":"page"},{"location":"#DAT038.add!-Union{Tuple{T}, Tuple{DAT038.SLinkedList,T}, Tuple{DAT038.SLinkedList,T,Int64}} where T","page":"DAT038.jl Documentation","title":"DAT038.add!","text":"add!(l, x, pos = 0)\n\nAdd node to linked list.\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.add!-Union{Tuple{T}, Tuple{RMHeap{T},T}} where T","page":"DAT038.jl Documentation","title":"DAT038.add!","text":"add!(rmheap, x)\n\nAdd to the heap.\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.addfirst!-Union{Tuple{T}, Tuple{DAT038.SLinkedList{T},T}} where T","page":"DAT038.jl Documentation","title":"DAT038.addfirst!","text":"addfirst!(l, x)\n\nAdd node to first position in linked list.\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.addlast!-Union{Tuple{T}, Tuple{DAT038.SLinkedList{T},T}} where T","page":"DAT038.jl Documentation","title":"DAT038.addlast!","text":"addlast!(l, x)\n\nAdd node to last position in linked list.\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.binarysearch-Union{Tuple{T}, Tuple{AbstractArray{T,1},T}} where T","page":"DAT038.jl Documentation","title":"DAT038.binarysearch","text":"binarysearch(a, item)\n\nBinary search in array. Time complexity O(logn)\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.insertionsort-Union{Tuple{AbstractArray{T,1}}, Tuple{T}, Tuple{AbstractArray{T,1},Int64}, Tuple{AbstractArray{T,1},Int64,Int64}} where T","page":"DAT038.jl Documentation","title":"DAT038.insertionsort","text":"insertionsort(a, lo = 2, hi = length(a))\n\nInsertion sort with linear search. Time complexity O(n^2), best case O(n). Fast for small arrays.\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.linearsearch-Union{Tuple{T}, Tuple{AbstractArray{T,1},T}} where T","page":"DAT038.jl Documentation","title":"DAT038.linearsearch","text":"linearsearch(a, item)\n\nLinear search in array. Time complexity O(n).\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.meld!-Union{Tuple{T}, Tuple{RMHeap{T},RMHeap{T}}} where T","page":"DAT038.jl Documentation","title":"DAT038.meld!","text":"meld!(rmheap, other)\n\nMeld two heaps.\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.meld-Union{Tuple{T}, Tuple{DAT038.BNode{T},DAT038.BNode{T}}} where T","page":"DAT038.jl Documentation","title":"DAT038.meld","text":"meld(node1, node2)\n\nMeld two nodes.\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.merge!-Union{Tuple{T}, Tuple{Any,Array{T,1},Array{T,1}}} where T","page":"DAT038.jl Documentation","title":"DAT038.merge!","text":"merge(array1, array2)\n\nMerge two arrays.\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.mergesort-Tuple{Any,Any,Any}","page":"DAT038.jl Documentation","title":"DAT038.mergesort","text":"mergesort(array, lo, hi)\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.mergesort-Tuple{Any}","page":"DAT038.jl Documentation","title":"DAT038.mergesort","text":"mergesort(array)\n\nMergesort algorithm with insertion sort at lowest level. Time complexity O(nlogn).\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.remove!-Union{Tuple{DAT038.SLinkedList{T}}, Tuple{T}} where T","page":"DAT038.jl Documentation","title":"DAT038.remove!","text":"removelast!(l)\n\nRemove last node from linked list. Time complexity O(n).\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.remove-Union{Tuple{RMHeap{T}}, Tuple{T}} where T","page":"DAT038.jl Documentation","title":"DAT038.remove","text":"remove(rmheap)\n\nRemove minimum element from the heap.\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.selectionsort-Union{Tuple{AbstractArray{T,1}}, Tuple{T}} where T","page":"DAT038.jl Documentation","title":"DAT038.selectionsort","text":"selectionsort(a)\n\nA selection sort algorithm. Time complexity O(n^2).\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.size-Tuple{DAT038.LinkedList}","page":"DAT038.jl Documentation","title":"DAT038.size","text":"size(l)\n\nGet size of linked list. Time complexity O(1).\n\n\n\n\n\n","category":"method"},{"location":"#DAT038.BNode","page":"DAT038.jl Documentation","title":"DAT038.BNode","text":"BNode\n\nBinary node type.\n\n\n\n\n\n","category":"type"},{"location":"#DAT038.DLLNode","page":"DAT038.jl Documentation","title":"DAT038.DLLNode","text":"DLLNode\n\nDouble linked list node. Holds pointers to previous and next nodes and some value.\n\n\n\n\n\n","category":"type"},{"location":"#DAT038.DLinkedList","page":"DAT038.jl Documentation","title":"DAT038.DLinkedList","text":"DLinkedList\n\nA double linked list implementation.\n\n\n\n\n\n","category":"type"},{"location":"#DAT038.DynamicArray","page":"DAT038.jl Documentation","title":"DAT038.DynamicArray","text":"DynamicArray\n\nA dynamic aray implementation. \n\n\n\n\n\n","category":"type"},{"location":"#DAT038.LinkedList","page":"DAT038.jl Documentation","title":"DAT038.LinkedList","text":"LinkedList\n\nLinked list abstract supertype.\n\n\n\n\n\n","category":"type"},{"location":"#DAT038.MinPQ","page":"DAT038.jl Documentation","title":"DAT038.MinPQ","text":"MinPQ\n\nBinary heap minimum priority queue.\n\n\n\n\n\n","category":"type"},{"location":"#DAT038.RMHeap","page":"DAT038.jl Documentation","title":"DAT038.RMHeap","text":"RMHeap\n\nRandomised meldable heaps type.\n\n\n\n\n\n","category":"type"},{"location":"#DAT038.SLLNode","page":"DAT038.jl Documentation","title":"DAT038.SLLNode","text":"SLLNode\n\nSingle linked list node. Holds pointer to next node and some value.\n\n\n\n\n\n","category":"type"},{"location":"#DAT038.SLinkedList","page":"DAT038.jl Documentation","title":"DAT038.SLinkedList","text":"SLinkedList\n\nA single linked list implementation.\n\n\n\n\n\n","category":"type"}]
}
